//thing that shown as rain/snow/etc
class weather_actor : actor
{
    private bool on_hold;
    //to reduce overhaul from findstate, store all important states here
    private array<state> weather_states;

    override void beginplay()
    {
        weather_states.Resize(CWE_ASH+1);
        weather_states[CWE_SNOW] = findstate('snow');
        weather_states[CWE_RAIN] = findstate('rain');
        weather_states[CWE_ASH] = findstate('ashes');
        weather_states[CWE_NONE] = findstate('cooldown');
        
        super.beginplay();
    }

    void set_weather_type(int type)
    {
        setstate(weather_states[type]);
    }

    bool is_on_hold() const
    {
        return on_hold;
    }

    private int roll_amount;

    default
    {
        +nointeraction
        +noclip
        
        radius 5;
        height 5;
        scale 0.1;
    }

    states
    {
        //loading snowflkes sprites
        snfl a 0;

        spawn:
            tnt1 a -1;
        stop;

        rain:
            wtdl a 1
            {
                on_hold = false;
                A_SetRenderStyle(0.6, STYLE_translucent);
                //scale = (0.003, 0.008);
				scale = (0.06, frandom(3.0, 6.0));
                //vel.z = -frandom[weather](20, 40);
                vel.z = -frandom[weather](40, 80);
            }
        rain_falling:
            wtdl a 1
            {
                if(pos.z <= floorz)
                    set_weather_type(CWE_NONE);
            }
        loop;

        snow:
            snfl a 1
            {
                on_hold = false;
                vel.z -= frandom[weather](3.5, 5.5);
                scale = (0.04, 0.04);
                frame = random[weather](0, 8);
                A_SetRenderStyle(1, STYLE_translucent);
            
                bROLLSPRITE = true;
                bROLLCENTER = true;
                bFLATSPRITE = true;
            }
        snow_falling:
            snfl "#" 2
            {
                vel.xy += ( frandom[weather](-0.5, 0.5), frandom[weather](-0.5, 0.5) );
                roll += random[weather](-40, 40);
                pitch += random[weather](-20, 20);

                if(pos.z <= floorz)
                    set_weather_type(CWE_NONE);
            }
        loop;

        ashes:
            stpk "#" 0
            {
                on_hold = false;
                vel.z -= frandom[weather](7, 12);
                scale = (0.02, 0.02);
                frame = random[weather](0, 8);

                bROLLSPRITE = true;
                bROLLCENTER = true;

                roll_amount = random[weather](-15, 15);
            }
        ashes_falling:
            stpk "#" 1
            {
                roll += roll_amount;
                if(pos.z <= floorz)
                    set_weather_type(CWE_NONE);
            }
        loop;

        god_what_it_is:
            wtft "#" 0
            {
                on_hold = false;
                vel.z -= frandom[weather](7, 12);
                scale = (0.02, 0.02);
                frame = random[weather](0, 4);

                bROLLSPRITE = true;
                bROLLCENTER = true;

                roll_amount = random[weather](-15, 15);
            }
        it_falling:
            wtft "#" 1
            {
                roll += roll_amount;
                if(pos.z <= floorz)
                    set_weather_type(CWE_NONE);
            }
        loop;
        

        death:
        cooldown:
            tnt1 a -1
            {
                vel = (0, 0, 0);
                scale = (1, 1);
                A_SetRenderStyle(1, STYLE_normal);
                roll = 0;
                pitch = 0;

                bROLLSPRITE = false;
                bROLLCENTER = false;
                bFLATSPRITE = false;

                on_hold = true;
                bcorpse = false;
                setorigin( (double.infinity, double.infinity, double.infinity), false);
                //console.printf("weather actor exist");
            }
        stop;
    }

}